\ ## Subroutine Threaded Forth
\
\ ### Register usage
\
\ ```
\ temp: r16, r17
\ TOS: X (r26, r27)
\ PSP: Y (r28, r29)
\ RSP: SP
\ ```

\ ## Host 

::host::

\ Jump to the value of the constant in the TOS by
\ loading R30:R31 with the value and jumping to it:

: tset-ip      2 + $e0 over $0f and or tc, $e0 over 4 rshift $0f and or tc,
               $f0 over 8 rshift $0f and or tc, #12 rshift $0f and $e0 or tc,
               $91a5 t, $91b5 t, $01fd t, $95f6 t, $95e7 t, $9409 t, ;

:noname        dup there - 2/ 1- dup abs $800 < if $fff and $d000 or th, drop else drop $940e th, 2/ th,  then ; is t,call
:noname        s" docon" tfwdref ; is t,docon
:noname        ; is t,enter
:noname        $920f t, $921f t, $922f t, $923f t, $930f t, $931f t, $932f t, $933f t,
               $934f t, $935f t, $936f t, $937f t, $938f t, $939f t, $93af t, $93bf t,
               $93cf t, $93df t, $93ef t, $93ff t, $b63f t, ; is t,doirq
:noname        $9508 t, ; is t,next
:noname        $9508 t, ; is t,exit
:noname        $be3f t, $91ff t, $91ef t, $91df t, $91cf t, $91bf t, $91af t, $919f t,
               $918f t, $917f t, $916f t, $915f t, $914f t, $913f t, $912f t, $911f t,
               $910f t, $903f t, $902f t, $901f t, $900f t, $9518 t, ; is t,irqexit
:noname        s" (does>)" tfwdref ; is t,dodoes
:noname        ; is t,docode
:noname        s" lit" tfwdref ; is t,lit
:noname        s" branch" tfwdref ; is t,branch
:noname        s" ?branch" tfwdref ; is t,?branch
:noname        talign
               there tlast @ t, tlast !
               there >target pack$ c@ 1+ tallot talign ; is thead
:noname        tlast @ tcell + dup tc@ $bf and swap tc! ; is timmediate
:noname        tcell + dup tc@ + 1+ taligned ; is tlink>

include common.ft

\ ## Target 

::target::

\ Compiler and control flow

code branch     $91ff $91ef $0fee $1fff $9105 $9115 $9516 $9507
                $930f $931f end-code
code ?branch    $91ff $91ef $018d $91a9 $91b9 $2b01 $f021 $9631
                $93ef $93ff $9508 $0fee $1fff $9105 $9115
                $9516 $9507 $930f $931f end-code
code lit        $93ba $93aa $91ff $91ef $0fee $1fff $91a5 $91b5
                $95f6 $95e7 $93ef $93ff end-code
code docon      $93ba $93aa $91ff $91ef $0fee $1fff $91a5 $91b5 end-code
code nop        end-code
code execute    $01fd $91a9 $91b9 $95f6 $95e7 $9509 end-code

\ Start vector:

0 constant     start

\ AVR reset handler

t: reset-handler
               $e008 t, $bf0e t, $ef0f t, $bf0d t, $ebcf t, $e0d8 t,
               t' start tset-ip

\ Stack operations

code >r         $91ef $91ff $93af $93bf $91a9 $91b9 $93ff $93ef end-code
code r>         $91ef $91ff $93ba $93aa $91bf $91af $93ff $93ef end-code
code r@         $93ba $93aa $b7ed $b7fe $9633 $91b1 $91a1 end-code
code rdrop      $91ef $91ff $910f $910f $93ff $93ef end-code

code sp@        $93ba $93aa $01de end-code
code rp@        $93ba $93aa $b7ad $b7be $9612 end-code
code sp!        $01ed end-code
code rp!        $91ff $91ef $bfad $bfbe $91a9 $91b9 $9409 end-code

code (s")       $91ff $91ef $0fee $1fff $01df $91a5 $e0b0 $93fa
                $93ea $0fea $1ffb $95f6 $95e7 $9631 $7fee $93ef
                $93ff end-code

