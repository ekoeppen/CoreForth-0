\ ## Indirect Threaded Forth
\
\ Register usage
\ 
\ ```
\ IP:     r25:r24
\ W:      r23:r22
\ SP: Y   r29:r28
\ RP: SP
\ TOS: X  r27:r26
\ ```
\ 
\ DOCOL / Enter
\ 
\ IP points to next word in the caller
\ W points to CFA

\ ### Host

::host::

cr

\ Set the instruction pointer (IP) to the value on top of the stack by
\ loading R24:R25 with the immediate value:

: tset-ip      $80 over $0f and or tc, $e0 over 4 rshift $0f and or tc,
               $90 over 8 rshift $0f and or tc, #12 rshift $0f and $e0 or tc, ;


\ Meta-compilation words:

:noname        t, ; is t,call
:noname        s" docon" tfwdref ; is t,docon
:noname        s" docol" tfwdref ; is t,enter
:noname        s" exit" tfwdref ; is t,exit
:noname        $940c t, s" next" tfind 2/ t, ; is t,next
:noname        s" lit" tfwdref ; is t,lit
:noname        s" branch" tfwdref ; is t,branch
:noname        s" ?branch" tfwdref ; is t,?branch
:noname        talign
               there tlast @ t, tlast !
               there >target pack$ c@ 1+ tallot talign ; is thead
:noname        tlast @ tcell + dup tc@ %01000000 or swap tc! ; is timmediate
:noname        tcell + dup tc@ + 1+ taligned ; is tlink>
:noname        s" (does>)" tfwdref ; is t,dodoes
:noname        there 2 + t, ; is t,docode
:noname        $920f t, $921f t, $922f t, $923f t, $930f t, $931f t, $932f t, $933f t,
               $934f t, $935f t, $936f t, $937f t, $938f t, $939f t, $93af t, $93bf t,
               $93cf t, $93df t, $93ef t, $93ff t, $b63f t,
               there 8 + tset-ip
               $940c t, s" next" tfind 2/ t, ; is t,doirq
:noname        s" reti" tfind t, ; is t,irqexit


\ Install an IRQ handler at the given vector number:

: irq-handler! ( num handler -- )
               2/
               swap 1- 4 * #target +
               $940c over w!
               2 + w! ;

\ Save the target image as a hex file:

: write-hex    s" avr.hex" w/o create-file throw >r
               trom #target there trom - r@ type-hex
               r> close-file throw ;

\ Initialize the target memory map and cell size:

$00000000 to trom
$00000200 to tram
        2 to tcell

trom tdp !
tram tvp !

$910 torg

\ ### Target

::target::

\ Inner interpreter words:

t: next        $01fc t, $30f9 t, $f018 t, $9165 t, $9175 t, $c002 t, $9161 t, $9171 t,
               $01cf t, $01fb t, $30f9 t, $f018 t, $9105 t, $9115 t, $c002 t, $9101 t,
               $9111 t, $01f8 t, $95f6 t, $95e7 t, $9409 t,
t: docol       $939f t, $938f t, $01cb t, $9602 t,
               $c000 t' next there - 2/ 1- $fff and or t,
t: docon       $93ba t, $93aa t, $01fb t, $9632 t, $30f9 t, $f018 t, $91a5 t, $91b5 t,
               $c002 t, $91a1 t, $91b1 t,
               $c000 t' next there - 2/ 1- $fff and or t,
t: dovar       $93ba t, $93aa t, $01db t, $9612 t,
               $c000 t' next there - 2/ 1- $fff and or t,

code exit      $918f $919f end-code

\ Control flow words

code branch    $01fc $30f9 $f018 $9185 $9195 $c002 $9181 $9191 end-code
code ?branch   $2bab $91a9 $91b9 $f449 $01fc $30f9 $f018 $9185
               $9195 $c004 $9181 $9191 $c001 $9602 end-code
code lit       $01fc $93ba $93aa $30f9 $f018 $91a5 $91b5 $c002
               $91a1 $91b1 $01cf end-code
code nop       end-code
code execute   $01fd $01bd $91a9 $91b9 $30f9 $f018 $9105 $9115 $c002
               $9101 $9111 $01f8 $95f6 $95e7 $9409 end-code

code reti      $be3f $91ff $91ef $91df $91cf $91bf $91af $919f
               $918f $917f $916f $915f $914f $913f $912f $911f
               $910f $903f $902f $901f $900f $9518 end-code

\ Start vector:

0 constant     start

\ AVR reset handler

t: reset-handler
               $e008 t, $bf0e t, $ef0f t, $bf0d t, $ebcf t, $e0d8 t,
               t' start tcell + tset-ip
               $c000 t' next there - 2/ 1- $fff and or t,

\ Stack operations

code >r        $93bf $93af $91a9 $91b9 end-code
code r>        $93ba $93aa $91af $91bf end-code
code r@        $93ba $93aa $b7ed $b7fe $9631 $91a1 $91b1 end-code
code rdrop     $910f $911f end-code

code sp@       $93ba $93aa $01de end-code
code rp@       $93ba $93aa $b7ad $b7be $9611 end-code
code sp!       $01ed end-code
code rp!       $9711 $bfad $bfbe $91a9 $91b9 end-code

code (s")      $01fc $91a5 $e0b0 $93fa $93ea $0fea $1ffb $9631 $7fee
               $01cf end-code

\ Systtem variables

$900 constant  init-latest
$902 constant  init-dp

$8ff constant  r0
$8bf constant  s0

\ Include the rest of the system:

include atmega328p.ft
include memory-mega.ft
include core.ft
include ../common/core.ft
include ../common/output.ft
include dictionary.ft
include compiler.ft
include utils.ft
include ../common/input.ft
include ../common/exception.ft
include ../common/control-flow.ft
include ../common/interpret.ft
include compiler-itc.ft

\ Hardware initialization

: uart-init    #25 UBRR0L c! 0 UBRR0H c!
               %00011000 UCSR0B c!
               %00000110 UCSR0C c! ;
: led-init     %00100000 >DDRB ;
: led-set      %00100000 >PORTB ;
: led-toggle   %00100000 >PINB ;
: led-clear    %00000000 >PORTB ;

: timer-init    cli
                led-init
                %00000000 TCCR0A c!
                %00000101 TCCR0B c!
                %00000001 TIMSK0 c!
                ;
i: t0-handler  led-toggle ;i

\ System start

: setup-pointers
               init-latest @ latest !
               init-dp @ dp !
               ;

: cold         hex uart-init
               setup-pointers
               0 (source-id) !
               quit
               bye ;

\ ## Finalize the compilation back in host mode:

::host::

 #1 t' reset-handler irq-handler!
#17 t' t0-handler irq-handler!

    tlast @ $900 >target w!
t' cold t' start tcell + >target w!
      tvp @ $902 >target w!

write-hex
