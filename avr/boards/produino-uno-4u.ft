\ ## Arduino CoreForth
\
\ CoreForth-0 for Arduino Uno boards, with simple UART and LED functionality.

::host::

\ Load extra files passed on the command line when compiling,
\ using the `-s` flag followed by the file name. The location for
\ each file is resolved based on the location of this file.

: include-extras
               0 begin dup argc @ < while
                  dup arg s" -s" str= if
                     1+ dup arg included
                  then
                  1+
                repeat drop ;

cr

\ ROM starts at 0x0000 and RAM at 0x0200:

$00000000 to trom
$00004000 to tram

trom tdp !
tram tvp !

$100 torg

::itc:: include ../itc.ft
::stc:: include ../stc.ft

::target::

\ System variables

$100 constant  init-latest
$102 constant  init-dp

$8ff constant  r0
$8bf constant  s0

\ Include the rest of the system:

include ../periph-avr.ft
include ../memory-mega.ft
include ../core.ft

: emit          begin USART0.STATUS c@ %00100000 and until USART0.TXDATAL c! ;
: key?          USART0.STATUS c@ %10000000 and ;
: key           begin key? until USART0.RXDATAL c@ ;

include ../../common/exception.ft
include ../../common/timeout.ft
include ../../common/core.ft
include ../../common/output.ft
include ../../common/input.ft
include ../dictionary.ft
include ../utils.ft
::itc:: include ../compiler-itc.ft
::stc:: include ../compiler-stc.ft
include ../../common/control-flow.ft
include ../../common/interpret.ft

\ Hardware initialization
\
\ Set the UART to 38400bps at 16MHz

: uart-init    #2500 USART0.BAUD !
               %00000011 USART0.CTRLC c!
               %00000001 PORTA.DIRSET c!
               %00000010 PORTA.DIRCLR c! 
               %11000000 USART0.CTRLB c! ;

\ LED at PC2 (D13)

: led-init     %00000100 PORTC.DIRSET c! ;
: +led         %00000100 PORTC.OUTSET c! ;
: ~led         %00000100 PORTC.OUTCLR c! ;
: -led         %00000100 PORTC.OUTTGL c! ;

\ Initialize the UART and LED
 
: hw-init      uart-init led-init ;

: setup-pointers
               init-latest @ latest !
               init-dp @ dp !
               ;

\ Declare a default application word which starts the interpreter.
\ This can be overridden in files loaded as extras:

: turnkey      0 (source-id) !
::itc::        s" CoreForth-0 AVR ITC ready" type cr
::stc::        s" CoreForth-0 AVR STC ready" type cr
               hex
               quit
               ;

\ Include any extra files:

include-extras

\ Cold start of the system:

: cold         hw-init
               setup-pointers
               turnkey
               reset ;

\ ## Finalize the compilation back in host mode:

::host::

\ Set the IRQ handler for reset

 #1 t' reset-handler irq-handler!

\ Store the values for latest and here (using the latest allocated address
\ in RAM), and let execution start with `cold`:

    tlast @ $100 >target w!
      tvp @ $102 >target w!
t' cold t' start tcell + >target w!

\ Finally, write out the Intel HEX file with the compiled program:

::itc:: s" produino-uno-4u-itc.hex" write-hex
::stc:: s" produino-uno-4u-stc.hex" write-hex

