\ -- Host ---------------------------------------------------------------------

::host::

include ../../../tether.ft
include ../janus/compiler.ft

:noname     ( c-addr n -- : compile word header into the target image )
            2drop talign
            there tlast @ t, tlast ! ; is thead

\ -- Target -------------------------------------------------------------------

::target::

$08000000 to trom
$20000000 to tram
        4 to tcell

trom tdp !
tram tvp !

tram $00001000 + t, 0 t,
trom $000000d0 + torg

::dtc::   $10 buffer: #docol
::dtc::   $10 buffer: #dodoes
          $FC buffer: psp
             variable s0
          $FC buffer: rsp
             variable r0

          $40 buffer: rxb
             variable rx-head
             variable rx-tail

          $40 buffer: txb
             variable tx-head
             variable tx-tail

$E000E100 constant NVIC_SETENA_BASE

$48000000 constant GPIOA_MODER
$48000018 constant GPIOA_BSRR
$48000020 constant GPIOA_AFRL
$48000024 constant GPIOA_AFRH
$48000028 constant GPIOA_BRR

$40021000 constant RCC_CR
$40021004 constant RCC_CFGR
$40021014 constant RCC_AHBENR
$40021018 constant RCC_APB2ENR
$40021030 constant RCC_CFGR3

$40013800 constant USART1_CR1
$4001380C constant USART1_BRR
$4001381C constant USART1_ISR
$40013824 constant USART1_RDR
$40013828 constant USART1_TDR

$40013000 constant SPI1_CR1
$40013004 constant SPI1_CR2
$40013008 constant SPI1_SR
$4001300C constant SPI1_DR

$40022000 constant FLASH_ACR

include ../cpus/cortex-m0/armv6-m-primitives.ft
::stc:: include ../cpus/cortex-m0/threading-stc.ft
::dtc:: include ../cpus/cortex-m0/threading-dtc.ft
include ../common/core.ft
include ../../common/core.ft
include ../dictionary/common.ft

: +led          %10 GPIOA_BSRR ! ;
: -led          %10 GPIOA_BRR ! ;

: +spi          %10000 GPIOA_BRR ! ;
: -spi          %10000 GPIOA_BSRR ! ;

: rbuf-ptr@    @ + c@ ;
: rbuf-ptr!    @ + c! ;
: rbuf-ptr++   dup @ 1+ $3F and swap ! ;

: !txb-empty?    tx-head @ tx-tail @ xor ;
: !rxb-empty?    rx-head @ rx-tail @ xor ;

i: usart1-handler
                %10000000 USART1_ISR bit@ !txb-empty? and if
                  txb tx-tail rbuf-ptr@ USART1_TDR !
                  tx-tail rbuf-ptr++
                else
                 %10000000 USART1_CR1 bic!
                then

                %00100000 USART1_ISR bit@ if
                  USART1_RDR @ rxb rx-head rbuf-ptr!
                  rx-head rbuf-ptr++
                then
                ;i

: emit          !txb-empty? if begin wfi !txb-empty? not until then
                txb tx-head rbuf-ptr!
                tx-head rbuf-ptr++
                %10000000 USART1_CR1 bis!
                ;

: key?          !rxb-empty? ;
: key           !rxb-empty? not if begin wfi !rxb-empty? until then
                rxb rx-tail rbuf-ptr@
                rx-tail rbuf-ptr++ ;

include ../../common/output.ft
include ../dictionary/headerless.ft
::stc:: include ../common/threading-stc.ft
::dtc:: include ../common/threading-dtc.ft
include ../../common/exception.ft
include ../../common/control-flow.ft
include ../common/compiler.ft
include ../common/tether.ft

$C0 constant init-start
$C0 constant init-cold
$C4 constant init-latest
$C8 constant init-dp
$CC constant init-vp

: setup-vars    init-latest @ latest ! init-dp @ (dp) ! init-vp @ vp !
::dtc::         ['] docol #docol 2 cells move
::dtc::         ['] next #docol 2 cells + cell move
::dtc::         ['] dodoes #dodoes 3 cells move
::dtc::         true
::stc::         false
                ram? !  ;

::stc:: code reset-handler
::stc::         $4668 $3820 $0006 $4801 $6800 $4687 $00C0 $0000 end-code

::dtc:: code reset-handler
::dtc::         $4668 $3880 $0006 $4f02 $cf20 $1c6d $4728
::dtc::         $ffff $00c0 $0000 end-code

: >spi>         begin %10 SPI1_SR bit@ until
                SPI1_DR c!
                begin %1 SPI1_SR bit@ until
                SPI1_DR c@
                ;

: spi>          0 >spi> ;
: >spi          >spi> drop ;

: dump          >r dup cr hex. space begin
                r@ while
                  dup c@ h.2 space 1+
                  r> 1- dup $10 mod 0= over and if cr over hex. space then >r
                repeat rdrop drop ;

: 48mhz         %1 FLASH_ACR bis!
                %1010000000000000000000 RCC_CFGR bis!
                %1000000000000000000000000 RCC_CR bis!
                %10 RCC_CFGR bis!
                ;

: setup-uart1   %11 RCC_CFGR3 bis!
                %100000000000000 RCC_APB2ENR bis!
                0 dup dup dup tx-head ! tx-tail ! rx-head ! rx-tail !
                GPIOA_MODER dup @ $FFC3FF0F and $00280000 or swap !
                GPIOA_AFRH dup @ $FFFFF00F and $110 or swap !
                #69 USART1_BRR !
                %10101101 USART1_CR1 bis!
                1 #27 lshift NVIC_SETENA_BASE bis! ;
                ;

: setup-spi1    %1000000000000 RCC_APB2ENR bis!
                %0001011100000000 SPI1_CR2 !
                SPI1_SR @ drop
                %0000001100011100 SPI1_CR1 !
                GPIOA_MODER dup @ $FFFF00FF and $0000A900 or swap !
                %1000000 SPI1_CR1 bis!
                ;

: setup-hw      48mhz %00100000000000000000 RCC_AHBENR !
                setup-uart1
                setup-spi1
                ;

: cold          s0 sp! r0 rp!
                setup-vars
                setup-hw +led
                ." CoreForth-0 ready" cr
                hex
                4 emit tether-loop ;

\ -- Host ---------------------------------------------------------------------

::host::

include ../janus/tether.ft

::tethered:: tether

::dtc:: t' #docol $0C + t@ t' ,enter 8 + t!
::dtc:: t' #dodoes $0C + t@ t' ,dodoes 8 + t!

: vars-to-image [t'] reset-handler 1+  trom $00000004 + t!
                [t'] usart1-handler 1+ trom $000000ac + t!
                [t'] cold              trom $000000C0 + t!
                tlast @                trom $000000C4 + t!
                tdp @                  trom $000000C8 + t!
                tvp @                  trom $000000CC + t!
                ;

: save-bin      ( filename name-len -- )
                vars-to-image
                w/o create-file throw >r
                #target there trom - r@ write-file throw
                r> close-file throw ;

::dtc:: s" stm32f030-nrf24-dtc.bin" save-bin
::stc:: s" stm32f030-nrf24-stc.bin" save-bin
